@page "/dogs"
@using APIExplorerApp.Models
@using APIExplorerApp.Services
@inject IDogService DogService

<div class="app-container">
    <div class="container py-4">
        <div class="page-header">
            <h3>🐕 Dog Image Gallery</h3>
        </div>

        <div class="dog-gallery">
            <div class="mb-4">
                <button @onclick="GetRandomDog" class="btn dog-button">
                    🐾 Get Random Dog Image
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center text-white">
                    <div class="loading-spinner mx-auto mb-2"></div>
                    <p><em>Fetching a cute doggo...</em></p>
                </div>
            }

            @if (!string.IsNullOrEmpty(currentDogImage))
            {
                <div class="card border-0 bg-transparent">
                    <img src="@currentDogImage" class="dog-image card-img-top" alt="Random dog" />
                    <div class="card-body">
                        <p class="card-text text-white">Here's a random dog for you! 🐕</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string currentDogImage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task GetRandomDog()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var dog = await DogService.GetRandomDogImageAsync();
            if (dog != null && !string.IsNullOrEmpty(dog.Message))
            {
                currentDogImage = dog.Message;
            }
            else
            {
                errorMessage = "Failed to load dog image. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}